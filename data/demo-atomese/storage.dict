%
% Example configuration file for an Atomspace-based dictionary.
%
% Three examples follow; one shows the use of the CogStorageNode, which
% provides network access, and another using RocksStorageNode, which
% provides access to dictionaries located on the local hard drive.
% The last uses the FileStorageNode, which is actually used for the
% demo.

% But first, begin with boilerplate: The dictionary is for English,
% the English locale should be used, and a version number.

#define dictionary-lang           en;
#define dictionary-locale         en_US.UTF-8;
#define dictionary-version-number 5.11.0;

% -----------------------
% CogStorageNode
%
% This will access an AtomSpace over the network, via a CogServer. The
% CogServer must be running, and must be loaded with language data.
%
% The default port for CogServers is 17001
% Here `localhost` is just 127.0.0.1
% Replace `localhost` by `example.com` or a dotted IPv4 address.
% The `r-thru` argument indicates that the read-thru proxy should be used:
% the cogserver will pass read requests onwards to any storage nodes
% that are open in the cogserver.
% #define storage-node "(CogStorageNode \"cog://localhost:17001?r-thru\")";

% -----------------------
% RocksStorageNode
%
% This will access an AtomSpace on a local hard drive, stored in a
% RocksDB database. The database must hold appropriate language data.
%
% The URL is just a path into the local filesystem.
%
% Uncomment this, and provide a correct file-path.
% #define storage-node "(RocksStorageNode \"rocks:///home2/linas/x13-all-in-one.rdb\")";

% -----------------------
% FileStorageNode
%
% This will access a file containing an AtomSpace encoded with
% s-expressions. The file must hold appropriate language data.
%
% The URL is just a path into the local filesystem.
%
% This is the one actually used in the demo. If you are getting errors,
% then verify that the path below is correct.

#define storage-node "(FileStorageNode \"file:///usr/local/share/link-grammar/demo-atomese/atomese-dict.scm\")";

% -----------------------
% Additional configuration parameters.

% Location where costs are stored. The cost will be obtained from
% the floating point value located at the `cost-key` Value on the
% Sections. It's assumed that this is a FloatValue, which is a vector;
% the index specifies the location in this vector.
#define cost-key "(Predicate \"*-Mutual Info Key cover-section\")";
#define cost-index 1;

% In the demo dictionary, the costs are provided by the MI, which is
% "better", the more positive it is.  The LG costs, however, are
% "better" when they are smaller (more negative). Thus, the value
% obtained above can be rescaled linearly befor being used as a cost.
% The rescaling is as usual: y=mx+b where m==`cost-scale` and
% b==`cost-offset`.
#define cost-scale -0.5;
#define cost-offset 0.0;

% Sections whose computed cost is greater than this will not be added
% to the local dictionary.
#define cost-cutoff 8.0;

% Sections with a missing cost will be assigned this default. To ignore
% sections with a missing cost, set it to some value greater than
% `cost-max`.
#define cost-default 2.0;

% Word-pairs are encoded in the dictionary as
%    (Evaluation pair-predicate (List (Word "leftword") (Word "rightword")))
% The pair-predicate is configureable, as below.
#define pair-predicate "(Predicate \"wrdpr\")";

% Due to historical design decisions, existing dictionaries use the
% (LgLinkNode "ANY") to mark word pairs. We note this here, as a reminder.
% Its commented out, because the demo does not use it.
% #define pair-predicate "(LgLink \"ANY\")";

% Same as above, but for word-pairs. Note the different key!
#define pair-key "(Predicate \"*-Mutual Info Key-*\")";
#define pair-index 1;
#define pair-scale -0.5;
#define pair-offset 0.0;
#define pair-cutoff 8.0;
#define pair-default 2.0;

% Default cost for `ANY` link types
#define any-default 2.6;

% -----------------------
% Data structure configuration. By default, Link Grammar expressions and
% disjuncts are created from Atomese Sections. But they can also be created
% from word-pairs, thus offering a form of Maximum Spanning Tree (MST)
% parsing, and Maximum Planar Graph (MPG) parsing. Also, existing sections
% can be supplemented with word-pair links ("optional expressions", in LG).
% Finally, if word pairs are not in the dictionary, but are needed to
% obtain a full parse, the ANY link type can be used to provide the missing
% link. Finally, if sections and word-pairs are disabled, but ANY is
% enabled, then the parses will be random planar graphs, with a uniform
% sampling (Just like the `any` language, each graph appears with equal
% probability).  There are a dozen parameters that control the above.
%
% Obtain expressions from Atomese Sections. The default mode.
% Set to 0 to disable.  Each section has a cost determined by the above
% config paramters.
#define enable-sections 1;

% Supplement existing sections with optional links, obtained from word-
% pair relations.  For example, if an existing disjunct `A- & B+` on word
% "wrd" is supplemented with pairs, the new disjunct will be
% `{J- or K+} & A- & B+ & {L- or M+}`, where `J-` and `L-` are obtained
% from pairs of the form ("other", "wrd") and `K+` and `M+` are obtained
% from pairs of the for ("wrd", "more"). That is, the links `J`, `K`, `L`
% and `M` are formed only if the AtomSpace has the corresponding word-pairs
% in it.
%
% The cost of these connectors is determined by the pair-config, above.
%
% If set to zero, these supplementary links will not be generated.
% If sections are not enabled, then these parameters have no effect.
#define extra-pairs 1;

% Same as above, but the supplementary connectors will all be of type `ANY`,
% and thus can connect to anything. Since these can connect to anything,
% they will not, in general, improve the parse. They are mostly useful for
% dealing with new, unknown words, and generating quasi-random linkages to
% those unknown words. The be effective, the cost should be set high enough
% so that these are more costly than existing word-pairs.
%
% Setting to zero disables this.
% If sections are disabled, the these parameters have no effect.
#define extra-any 1;

% Create expressions that consist entirely of word-pair relationships.
% Setting this to zero disables the creation of such disjuncts. If
% `enable-sections` above is turned off, then the only disjuncts will be
% the ones created from pairs, and the parse result will be pure MPG
% parsing.
%
% Each connector has a cost is that is determined by the config parameters,
% above.
#define pair-disjuncts 1;

% Supplement the above with additional connectors of type "ANY". This is
% useful for providing links between words that don't already exist as
% pairs in the dataset. This has no effect, if `pair-disjuncts` (above)
% is set to zero.
#define pair-with-any 1;

% Create expressions that consist entirely of "ANY" link-types.
% Setting this to zero disables the creation of such disjuncts.
% If `enable-sections` and `pair-disjuncts` (above) are turned
% off, the result will be pure random planar tree parsing.
%
% Each connector has a cost is that is determined by the config parameters,
% above.
#define any-disjuncts 1;

% -----------------------
% For this file to be read, at least one bogus entry is needed. It is
% meaningless; we only need to trick the code into reading this file.
% This file is read as an affix file, so only affix names are allowed.
foo: UNITS+;
